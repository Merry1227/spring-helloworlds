#logger settings
log4j.rootLogger=DEBUG,console1
#,file1,dailyRollingFile1,rollingFile1,writer1,syslog
log4j.logger.cmei.logger1=DEBUG,dailyRollingFile1
log4j.logger.cmei=DEBUG,dailyRollingFile1
log4j.logger.cmei.logger2=INFO,rollingFile1

#####appender类型#################################
###org.apache.log4j.ConsoleAppender（控制台)
#org.apache.log4j.FileAppender（文件)
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件)
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#org.apache.log4j.net.SyslogAppender (log4j的日志信息发送到远程linux服务器的syslog中)
#import org.apache.log4j.net.SocketAppender;
################################################

###################layout类型######################
#org.apache.log4j.HTMLLayout（以HTML表格形式布局)
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#################################################

################LayoutPattern####################
#   %m   输出代码中指定的消息
#　　%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#　　%r   输出自应用启动到输出该log信息耗费的毫秒数，不是太有意义
#　　%c   列出logger名字空间的全称,加上{h} 表示层次
#    %C   列出调用 logger 类的全名。
#　　%t   输出产生该日志事件的线程名
#　　%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
#　　%d   输出日志时间点的日期或时间，默认格式为ISO8601(2016-12-22 14:58:00,779)，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921
#　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )
#    实际上有%l,%t不是太有必要了。
#   填充： %5p 右对其填充 %-5p左对其填充
#########layout examples#########################
#一般格式：
#日期 错误级别，logger名 日志发生的位置 具体的 message回车
#%d  %-5p %c{2} %l %m%n
#################################################

#console appender settings
log4j.appender.console1=org.apache.log4j.ConsoleAppender
#默认System.out,可不配
log4j.appender.console1.target=System.out
log4j.appender.console1.Encoding=UTF-8
log4j.appender.console1.layout=org.apache.log4j.PatternLayout
log4j.appender.console1.layout.ConversionPattern=%d{yy-MM-dd HH:mm:ss} %-5p %c{2} %l %m%n

#daily rolling file appender
log4j.appender.dailyRollingFile1= org.apache.log4j.DailyRollingFileAppender
log4j.appender.dailyRollingFile1.File = dailyRollingFile.log
log4j.appender.dailyRollingFile1.Append = true
log4j.appender.dailyRollingFile1.Threshold = INFO
log4j.appender.dailyRollingFile1.layout = org.apache.log4j.PatternLayout
log4j.appender.dailyRollingFile1.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

# size rolling file appender settings
log4j.appender.rollingFile1=org.apache.log4j.RollingFileAppender
#指定日志消息的输出最低层次。
log4j.appender.rollingFile1.Threshold=INFO
#指定消息输出的文件路径。
log4j.appender.rollingFile1.File=rollingfilelog.log
#默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
log4j.appender.rollingFile1.Append=true
#后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到filelog.log.1
log4j.appender.rollingFile1.MaxFileSize=1024MB
log4j.appender.rollingFile1.MaxBackupIndex=10
log4j.appender.rollingFile1.layout=cmei.demologs.MyPatternLayout
log4j.appender.rollingFile1.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2} %m: %S%n

#syslog
###前提条件：应该修改syslog的配置文件，因为syslog默认的配置是不能接收网络数据的，其配置文件syslog.conf文件通常在 /etc下：在文件中加入:  *.* local5,local7.none;<tab>;<tab>      /usr/adm/network.log
###其次  启动syslog需使用：syslogd -r命令，否则不能接收网络数据，同时应注意关掉linux的防火墙。
#log4j.appender.syslog=org.apache.log4j.net.SyslogAppender
#log4j.appender.syslog.SyslogHost=127.0.0.1  #syslog 远程服务器 ip
#log4j.appender.syslog.Encoding=UTF-8
#log4j.appender.syslog.Append=true
#log4j.appender.syslog.Facility=local2 #系统默认提供Facility变量包括 local0-local7,参见配置文件
#log4j.appender.syslog.Threshold=WARN
#log4j.appender.syslog.layout=com.microstrategy.alert.utils.AlertPatternLayout
#log4j.appender.syslog.layout.ConversionPattern=%-5p %d [COMMERCE] [%t] [%c{2}] %m : %S%n


