<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">
     
    <!-- active component annotations like @Service,@Repository,@Component -->  
    <context:component-scan base-package="cmei.sql" >
    <!--  <context:include-filter type="regex" expression=".dao.*"/>-->
    </context:component-scan>
    
    
    <aop:aspectj-autoproxy/>
    
    
    <!-- active annotations like @autowired, @required,... in java class,have to add xmlns:context to beans header-->    
   	<!-- <context:annotation-config/>  removed after using context:component-scan-->    

        
     <!--   
		<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
			<property name="transactionManagerName">
			<value>java:/TransactionManager</value>
			</property>
		</bean>
		
		<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		</bean>
		
		<bean id="traOffer" class="cmei.spring.transaction.TraOffer">
		<property name="transactionTemplate"><ref bean="transactionTemplate"/></property>
		</bean>
		 --> 
		 
		 
	<!-- step1: dataSource from jdni-->
	<!--  <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"	 
	<property name="jndiName">
	<value>java:comp/env/jdbc/myDataSource</value>
	</property>	
	</bean>
	-->
	
	<!-- step 0:ds config 
	<bean id="propertyConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
			<value>classpath:ds.config</value>
           </list>
        </property>
   </bean>-->
	
	
	
	
	<!--step1:dataSource from connection pool  -->
	<bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		 <property name="driverClassName" value="com.mysql.jdbc.Driver" />
		 <property name="url" value="jdbc:mysql://10.199.86.215/product_design_v6"></property>
		 <property name="username" value="alert"></property>
		 <property name="password" value="alert37"></property>
	 </bean>	
	 
	 <bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
		 <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		 <property name="url" value="jdbc:mysql://10.199.86.215/product_design_v6"></property>
		 <property name="username" value="alert"></property>
		 <property name="password" value="alert37"></property>
	 </bean> 
	 
	 <!--  
	 <bean id="dataSource11" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
		 <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		 <property name="uniqueResourceName" value="test_transaction"></property>
		 <property name="poolSize" value="10"></property>
		 <property name="xaProperties">
		 	<props>
		 		<prop key="url">jdbc:mysql://localhost:3306/test_transaction</prop>
		 		<prop key="user">root</prop>
		 		<prop key="password"></prop>
		 	</props>
		 </property>
	 </bean>	
	 
	 <bean id="dataSource22" class="com.atomikos.jdbc.SimpleDataSourceBean" init-method="init" destroy-method="close">
		 <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		 <property name="uniqueResourceName" value="test_transaction2"></property>
		 <property name="xaDataSourceProperties">
		    <value>user=root;password=;url=jdbc:oracle://localhost:3306/test_transaction2</value>
		 </property>
		 <property name="exclusiveConnectionMode">
		 	<value>true</value>
		 </property>
		 <property name="connectionPoolSize">
		 	<value>10</value>
		 </property>		 
	 </bean>
	 
	 <bean id="dataSource23" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean" init-method="init" destroy-method="close">
	     <property name="uniqueResourceName"><value>nonXA/test_transaction2</value></property> 
		 <property name="driverClassName" value="com.mysql.jdbc.Driver" />
		 <property name="url" value="jdbc:mysql://localhost:3306/test_transaction2"></property>
		 <property name="user" value="root"></property>
		 <property name="password" value=""></property>
		 <property name="poolSize" value="10"></property>
		 <property name="borrowConnectionTimeout" value="60"></property>    	 
	 </bean>
	 
	 -->
	 
	 <!-- step2:sql session 
	  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 <property name="dataSource" ref="dataSource" />
	 </bean>
	 -->
	
	 
	 <!-- step3-1: add maper to MapperFacotryBean   
	 <bean id="accountMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	 	<property name="mapperInterface" value="cmei.mysql.dao.AccountMapper"></property>
	  	<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	 </bean>
	 -->
	 
	 
	 <bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource1" />
		<property name="mapperLocations" value="/mappers/*.xml" />
		<property name="typeAliasesPackage" value="cmei.sql.dao" />
	 </bean>
	 
	 <bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource2" />
		<property name="mapperLocations" value="/mappers/*.xml" />
		<property name="typeAliasesPackage" value="cmei.sql.dao" />
	 </bean>
		
	<!-- step 3:config different dao -->
	<bean id="accountDAO1" class="cmei.sql.dao.AccountDAO">
		<property name="sqlSessionFactory" ref="sqlSessionFactory1"></property>
	</bean>
	
	<bean id="accountDAO2" class="cmei.sql.dao.AccountDAO">
		<property name="sqlSessionFactory" ref="sqlSessionFactory2"></property>
	</bean>
	
	<bean id="accountService" class="cmei.sql.dao.AccountService">
		<property name="accountDAO1" ref="accountDAO1"></property>
		<property name="accountDAO2" ref="accountDAO2"></property>
	</bean>
	
	
	<!-- step4:config transactionManager atomikos -->
	<!--
	<bean id="atomikosTransactionManager"
	      class="com.atomikos.icatch.jta.UserTransactionManager" 
	      init-method="init" destroy-method="close">
	      <property name="forceShutdown" value="true"/>
	</bean>
	<bean id="atomikoUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300"></property>
	</bean> 
	-->
	

	<!-- step5:config spring JTA transactionManager -->
	<!--
	<bean id="springTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager"></property>
		<property name="userTransaction" ref="atomikoUserTransaction"></property>
		<qualifier value="crossDBTM" />
	</bean>	 
	 -->
	
	<!-- step6:config aop -->
	<!-- <tx:annotation-driven transaction-manager="springTransactionManager" proxy-target-class="true"  />  -->
	
	<!-- multi-transaction config -->
	<bean id="txManager1" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
 		<property name="dataSource" ref="dataSource1" />
    	<qualifier value="tx1"/>
  	</bean> 
  	 
  	 <bean id="txManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
 		<property name="dataSource" ref="dataSource2" />
    	<qualifier value="tx2"/>
  	 </bean> 
  	 
	<tx:annotation-driven proxy-target-class="true"  />



	
	<!--
	<tx:advice id="txAdvice" transaction-manager="springTransactionManager">
		<tx:attributes>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="*" read-only="true" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	  
	<aop:config>
		<aop:pointcut expression="execution(* cmei.mysql.dao.AccountService.transfer(..))" id="serviceOperation"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
	</aop:config> -->
		 
</beans>
